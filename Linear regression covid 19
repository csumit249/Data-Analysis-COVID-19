from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import pandas as pd
data = pd.read_csv("D:/embedded/covid_19_dataa.csv")
time = pd.to_datetime(data['ObservationDate'])
dat = data.drop(columns=["ObservationDate","SNo"])
dat = dat[0:1000]
dat['time']=time

#x = time[:,np.newaxis]
x = dat['Deaths'][:,np.newaxis]
y= dat['Confirmed']
#print(y,x)
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

#X_test['Date']=X_test['Date'].map(dt.datetime.toordinal)
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X_train,y_train)

# Make predictions using the testing set
y_pred = regr.predict(X_test)
y_test = y_test[:,np.newaxis]
a = [2,1,3,8]
b = pd.Series(a)
b = b[:,np.newaxis]
confirmed_predict = regr.predict(b)
print(confirmed_predict)
x_pred = regr.predict(y_test)
#print(x_pred)
# The coefficients
# The coefficients
print('Coefficients: \n', regr.coef_)
# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(y_test,y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
      % r2_score(y_test, y_pred))

# Plot outputs
plt.scatter(X_test, y_test,  color='black')
plt.plot(X_test,y_pred, color='blue', linewidth=3)

plt.xticks(())
plt.yticks(())


plt.show()
